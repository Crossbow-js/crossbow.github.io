config:
  progress: false

env:
  CONTAINER:   crossbow-web
  IMAGE:       shakyshane/crossbow-web
  PROD_FILE:   docker-compose.prod.yaml
  DO_AUTH:     root@178.62.114.125
  IN_TS_FILE:  public/ts/scripts.ts
  OUT_JS_FILE: scripts.js
  OUT_JS_PATH: public/js/scripts.js
  OUT_JS_DIR:  public/js
  OUT_JS_MAP:  public/js/scripts.js.map
  JS_MANIFEST: public/js/manifest.json
  HTML_TARGET: public-html

watch:
  default:
    before:
      - build:*
      - templates --dev
      - bs:serve
    '_src:data:public/img':
      - templates --dev
      - bs:reload
    'public/js':
      - bs:reload
    'scss':
      - crossbow-sass
      - bs:inject

tasks:

  release:
    description: Create a production release of CSS/JS/HTML assets
    tasks:
      - build:*
      - templates
      - html-min

  (build):
    css:
      - clean:css
      - crossbow-sass
      - crossbow-sass --production --rev --manifest
    js:
      - clean:js
      - ts
      - uglify

  (docker):
    up-dev:  '@sh docker run --name $CONTAINER -v `pwd`/certs:/etc/letsencrypt -p 80:80 -p 443:443 $IMAGE'
    up-prod: '@sh docker run --name $CONTAINER -v /etc/letsencrypt:/etc/letsencrypt -p 80:80 -p 443:443 $IMAGE'
    push: '@sh docker push $IMAGE'
    build: '@sh docker build -t $IMAGE .'
    release:
      - release
      - docker:build
      - docker:push
      - '@cb delay 5'
      - server:pull
      - server:stop
      - server:up
    prod:
      - build:*
      - templates
      - docker:build
      - docker:up-prod

  (server):
    pull: '@sh ssh $DO_AUTH docker pull shakyshane/crossbow-web'
    stop: '@sh ssh $DO_AUTH docker stop $CONTAINER'
    up:   '@sh ssh $DO_AUTH docker run --name $CONTAINER -v /etc/letsencrypt:/etc/letsencrypt -p 80:80 -p 443:443 $IMAGE'
    certs: '@sh scp -r $DO_AUTH:/etc/letsencrypt/live ./certs'

  (clean):
    docker-images: '@sh docker rmi $(docker images -f "dangling=true" -q)'
    css:  '@sh rm -rf public/css/*.{css,map,json}'
    js:   '@sh rm -rf public/js/*.{js,map,json}'

  (bs):
    reload: '@npm browser-sync reload'
    inject: '@npm browser-sync reload --files core.css'
    serve: >
      @bg browser-sync start
      --server public
      --ss public-html
      --reloadDebounce 500

  html-min: >
    @npm html-minifier
    --input-dir  $HTML_TARGET
    --output-dir $HTML_TARGET
    --collapse-whitespace

  ts:
    description: Compile Typescript files
    tasks: >
      @npm tsc $IN_TS_FILE
      --outFile $OUT_JS_PATH
      --allowJs
      --sourceMap

  uglify:
    description: Uglify TS output, create sourcemap + manifest.json
    tasks: |
      @npm \
      JS="`git hash-object $OUT_JS_PATH`.js"
      JS_FILE="$OUT_JS_DIR/`git hash-object $OUT_JS_PATH`.js"
      JS_MAP="`git hash-object $OUT_JS_MAP`.js.map"
      JS_MAP_FILE="$OUT_JS_DIR/`git hash-object $OUT_JS_MAP`.js.map"
      uglifyjs $OUT_JS_PATH --mangle --screw-ie8 \
        --in-source-map $OUT_JS_MAP \
        --source-map-url $JS_MAP \
        --source-map $JS_MAP_FILE > $JS_FILE
      echo "{\"$OUT_JS_FILE\": \"$JS\"}" > $JS_MANIFEST

  sass:
    description: use the 'crossbow-sass' module to compile SCSS files into css
    tasks: crossbow-sass
    options:
      input: scss/core.scss
      output: public/css

  templates:
    tasks:
      - '@sh rm -rf public-hml/**'
      - tasks/templates.js
    options:
      config:
        base: _src
        prettyUrls: true
        defaultLayout: default.hbs
      data:
        '$$': 'all:data'
      output: 'public-html'
      input:
        - '_src/*.hbs'
        - '_src/*.md'
        - '_src/docs/**/*.{md,html,hbs}'

options:
  crossbow-sass:
    input: scss/core.scss
    output: public/css